from sympy import Matrix
import sympy as sp

def createP(n : int):
    P = [[0]*(n+1) for i in range(n+1)]
    #print(P)
    P[0][1] = 1
    for i in range(1,n):
        P[i][i] = 2 * i * (1 - i/n) / n
        P[i][i+1] = (1 - i/n) **2
        P[i][i-1] = (i/n) **2
    P[n][n-1] = 1
    return P


P =   [[0.005, 0.025, 0.035, 0.065, 0.003, 0.014, 0.035, 0.005, 0.040, 0.005, 0.008, 0.078, 0.003, 0.210, 0.003, 0.018, 0.000, 0.104, 0.095, 0.160, 0.001, 0.031, 0.010, 0.001, 0.011, 0.001],
        [0.081, 0.000, 0.000, 0.000, 0.344, 0.000, 0.000, 0.000, 0.050, 0.013, 0.000, 0.138, 0.000, 0.000, 0.069, 0.000, 0.000, 0.094, 0.025, 0.013, 0.081, 0.000, 0.000, 0.000, 0.094, 0.000],
        [0.113, 0.000, 0.025, 0.004, 0.243, 0.000, 0.000, 0.116, 0.060, 0.000, 0.035, 0.032, 0.004, 0.000, 0.176, 0.011, 0.000, 0.035, 0.000, 0.099, 0.039, 0.000, 0.000, 0.000, 0.011, 0.000],
        [0.100, 0.040, 0.022, 0.012, 0.162, 0.045, 0.007, 0.022, 0.140, 0.000, 0.002, 0.010, 0.037, 0.015, 0.040, 0.010, 0.000, 0.052, 0.045, 0.132, 0.047, 0.012, 0.037, 0.000, 0.007, 0.000],
        [0.065, 0.016, 0.043, 0.097, 0.040, 0.031, 0.015, 0.012, 0.039, 0.001, 0.003, 0.043, 0.042, 0.114, 0.027, 0.029, 0.005, 0.149, 0.116, 0.051, 0.007, 0.020, 0.024, 0.009, 0.004, 0.000],
        [0.073, 0.011, 0.019, 0.004, 0.073, 0.080, 0.004, 0.011, 0.115, 0.008, 0.000, 0.042, 0.004, 0.000, 0.195, 0.000, 0.000, 0.099, 0.031, 0.179, 0.023, 0.011, 0.011, 0.000, 0.008, 0.000],
        [0.101, 0.020, 0.015, 0.010, 0.176, 0.005, 0.015, 0.075, 0.090, 0.000, 0.000, 0.025, 0.005, 0.020, 0.106, 0.005, 0.005, 0.101, 0.045, 0.106, 0.045, 0.000, 0.025, 0.000, 0.005, 0.000],
        [0.187, 0.002, 0.006, 0.000, 0.501, 0.009, 0.002, 0.011, 0.106, 0.000, 0.000, 0.000, 0.006, 0.004, 0.082, 0.002, 0.000, 0.006, 0.019, 0.033, 0.011, 0.000, 0.009, 0.000, 0.006, 0.000],
        [0.051, 0.009, 0.066, 0.030, 0.032, 0.012, 0.014, 0.004, 0.000, 0.000, 0.003, 0.049, 0.032, 0.260, 0.072, 0.015, 0.001, 0.059, 0.102, 0.151, 0.001, 0.028, 0.000, 0.005, 0.000, 0.004],
        [0.188, 0.000, 0.000, 0.000, 0.312, 0.000, 0.000, 0.000, 0.062, 0.000, 0.000, 0.000, 0.000, 0.000, 0.250, 0.000, 0.000, 0.000, 0.000, 0.000, 0.188, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.024, 0.000, 0.000, 0.000, 0.268, 0.000, 0.000, 0.000, 0.317, 0.000, 0.000, 0.000, 0.000, 0.049, 0.049, 0.000, 0.000, 0.000, 0.146, 0.049, 0.024, 0.000, 0.049, 0.000, 0.024, 0.000],
        [0.125, 0.006, 0.014, 0.034, 0.177, 0.020, 0.014, 0.006, 0.120, 0.003, 0.003, 0.151, 0.006, 0.006, 0.071, 0.003, 0.003, 0.006, 0.046, 0.066, 0.026, 0.000, 0.003, 0.000, 0.094, 0.000],
        [0.214, 0.058, 0.004, 0.000, 0.263, 0.000, 0.000, 0.012, 0.152, 0.000, 0.000, 0.000, 0.029, 0.004, 0.070, 0.074, 0.004, 0.008, 0.049, 0.012, 0.033, 0.000, 0.004, 0.000, 0.008, 0.000],
        [0.056, 0.013, 0.063, 0.162, 0.084, 0.025, 0.141, 0.016, 0.040, 0.001, 0.008, 0.008, 0.012, 0.009, 0.072, 0.009, 0.001, 0.009, 0.059, 0.165, 0.008, 0.001, 0.020, 0.000, 0.016, 0.000],
        [0.011, 0.018, 0.021, 0.026, 0.008, 0.144, 0.005, 0.008, 0.021, 0.000, 0.000, 0.029, 0.062, 0.202, 0.020, 0.035, 0.000, 0.137, 0.035, 0.063, 0.083, 0.024, 0.042, 0.000, 0.006, 0.002],
        [0.105, 0.006, 0.000, 0.000, 0.204, 0.000, 0.000, 0.022, 0.044, 0.000, 0.000, 0.083, 0.006, 0.000, 0.149, 0.050, 0.000, 0.182, 0.077, 0.039, 0.033, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000],
        [0.122, 0.012, 0.023, 0.034, 0.247, 0.006, 0.012, 0.012, 0.113, 0.001, 0.015, 0.007, 0.038, 0.023, 0.088, 0.006, 0.000, 0.035, 0.054, 0.081, 0.009, 0.016, 0.006, 0.000, 0.041, 0.000],
        [0.098, 0.014, 0.026, 0.014, 0.110, 0.020, 0.002, 0.071, 0.113, 0.005, 0.000, 0.011, 0.017, 0.018, 0.085, 0.026, 0.009, 0.014, 0.073, 0.175, 0.053, 0.002, 0.042, 0.000, 0.006, 0.000],
        [0.059, 0.023, 0.007, 0.001, 0.078, 0.005, 0.002, 0.340, 0.130, 0.001, 0.000, 0.014, 0.010, 0.006, 0.081, 0.007, 0.000, 0.050, 0.051, 0.058, 0.022, 0.002, 0.028, 0.000, 0.025, 0.000],
        [0.044, 0.020, 0.036, 0.024, 0.036, 0.004, 0.024, 0.000, 0.036, 0.000, 0.004, 0.077, 0.020, 0.125, 0.004, 0.060, 0.000, 0.190, 0.157, 0.125, 0.000, 0.012, 0.000, 0.000, 0.000, 0.000],
        [0.061, 0.000, 0.000, 0.000, 0.626, 0.000, 0.000, 0.000, 0.243, 0.000, 0.000, 0.000, 0.000, 0.000, 0.043, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.026, 0.000],
        [0.200, 0.006, 0.006, 0.000, 0.211, 0.000, 0.000, 0.183, 0.200, 0.000, 0.000, 0.022, 0.006, 0.044, 0.083, 0.000, 0.000, 0.000, 0.022, 0.011, 0.000, 0.000, 0.006, 0.000, 0.000, 0.000],
        [0.059, 0.000, 0.118, 0.000, 0.000, 0.059, 0.000, 0.000, 0.176, 0.000, 0.000, 0.000, 0.000, 0.000, 0.059, 0.294, 0.000, 0.000, 0.000, 0.176, 0.000, 0.000, 0.059, 0.000, 0.000, 0.000],
        [0.092, 0.033, 0.026, 0.013, 0.046, 0.079, 0.013, 0.039, 0.066, 0.000, 0.000, 0.020, 0.046, 0.033, 0.112, 0.020, 0.000, 0.026, 0.105, 0.197, 0.000, 0.000, 0.033, 0.000, 0.000, 0.000],
        [0.200, 0.000, 0.000, 0.000, 0.800, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000]]
temp = [0.009362,0.001892,0.003356,0.004735,0.015151,0.003106,0.002355,0.006378,0.009157,0.000192,0.000491,0.004150,0.002625,0.008860,0.007824,0.002120,0.000199,0.008052,0.007807,0.011496,0.002856,0.001342,0.002122,0.000192,0.001801,0.000062]
#temp = [0.005, 0.025, 0.035, 0.065, 0.003, 0.014, 0.035, 0.005, 0.040, 0.005, 0.008, 0.078, 0.003, 0.210, 0.003, 0.018, 0.000, 0.104, 0.095, 0.160, 0.001, 0.031, 0.010, 0.001, 0.011, 0.001]
s = sum(temp)
for elem in temp:
    print(elem*100/s)
print(s)
# print(P)
A = Matrix(P)
print(A.shape)
# Tính các giá trị riêng và vector riêng của A
#eigenvalues, eigenvectors = LA.eig(np.diag((1, 2, 3)))
eigenvalues = A.eigenvals()
for ei in eigenvalues:
    if sp.re(ei) >0.99:
        eigen = ei
        break
# eigen = 0.997942344399339 + 9.83900741869067e-65*sp.I 
eigenvectors = A.eigenvects()
for eigenvect in eigenvectors:
    if eigenvect[0] == eigen:
        desired_eigenvectors = eigenvect[2]
        break
print("eigenvectors with eigenvalue 1:")
print(desired_eigenvectors)
# print("eigenvalues A:")
# # print(eigenvalues)
# P, J = A.jordan_form()
# P_inv = P.inv()
# C = P @ J @ P_inv
# print("Matrix P:")
# print(P)
# print("\nJordan J:")
# print(J)